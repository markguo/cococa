#!/bin/env python26
# -*- coding: gbk -*-

import sys
import subprocess
import optparse
import time
import glob
import os
import ConfigParser
import re
import socket
import logging 
import logging.handlers

from LocalAux import parse_run_time_flags, ReportFailExec, ReportSuccessExec
from daemonize import daemonize

THIS_HOST = socket.gethostname()
THIS_IP = socket.gethostbyname(THIS_HOST)
g_monitor_agent = None
L = None

class MyLogRotate:
    def __init__(self, filename, rotate_type):
	self.filename = filename
	self.rotate_type = rotate_type
	self._log_fobj = None
	self._current_logsuffix = None
	self._prepare_log()

    def _prepare_log(self):
	timefmt = ''
	if self.rotate_type == 'HOURLY':
	    timefmt = '%Y%m%d-%H'
	elif self.rotate_type == 'DAILY':
	    timefmt = '%Y%m%d'
	else:
	    raise ValueError('Unknow rotate_type: %s' % self.rotate_type)

	logsuffix = time.strftime(timefmt, time.localtime())
	if not self._current_logsuffix  or self._current_logsuffix != logsuffix:
	    if self._log_fobj:
		self._log_fobj.close()
	    self._current_logsuffix = logsuffix
	    log_file = '%s.%s' % (self.filename, logsuffix)
	    self._log_fobj = open(log_file, 'a')

	# TODO: Cleanup old logs 

    def log(self, msg, with_CRLF = False):
	self._prepare_log()
	if with_CRLF:
	    print >> self._log_fobj, msg
	else:
	    print >> self._log_fobj, msg,

class MonitorAgent:
    def __init__(self):
	pass

    def ping(self, info):
	'''Send info to our monitor system.'''

	L.info('MONITOR %s %s %s' % (THIS_HOST, THIS_IP, str(info)))

class TaskExecutionResult:
    def __init__(self, name, succeed, used_time, msg):
	self.name = name
	self.succeed = succeed
	self.used_time = used_time
	self.msg = msg

    def __str__(self):
	return 'TASK_END %s succeed:%s, used_time:%d, msg:%s' % (self.name, 
		self.succeed,
		self.used_time, self.msg)

class Task:
    def __init__(self, task_config):
	self._load_from_config(task_config)

    def _load_from_config(self, config_file):
	conf = ConfigParser.ConfigParser()
	conf.read(config_file)
	self._name = os.path.basename(config_file).split('.')[0]
	self._cmd = conf.get('DCRON', 'CMD')
	self._working_directory = conf.get('DCRON', 'WORKING_DIRECTORY')
	self._run_time_flags = conf.get('DCRON', 'RUN_TIME_FLAGS')
	self._log_prefix = conf.get('DCRON', 'LOG_PREFIX')
	self._log_rotate_type = conf.get('DCRON', 'LOG_ROTATE_TYPE')

	if self._log_rotate_type not in ('HOURLY', 'DAILY'):
	    raise ConfigError('Invalid LOG_ROTATE_TYPE: %s. Should be HOURLY or DAILY' %
		    self._log_rotate_type)

	self._minute, self._hour = parse_run_time_flags(self._run_time_flags)

    def name(self):
	return self._name

    def cmd(self):
	return self._cmd

    def should_run(self, st_now):
	return st_now.tm_min in self._minute \
		and st_now.tm_hour in self._hour

    def _do_command(self, cmd):
	try:
	    logger = MyLogRotate(self._log_prefix, self._log_rotate_type)

	    pipe = subprocess.Popen(['/bin/bash', '-c', cmd], stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
	    for l in pipe.stdout:
		logger.log(l)

	    pipe.wait()

	    return pipe.returncode == 0, pipe.returncode, ''

	except Exception, e:
	    return False, -1, str(e)

    def run(self):
	os.chdir(self._working_directory)

	start_time = time.time()
	exec_succeed, exit_code, msg = self._do_command(self._cmd)
	cmd_run_time = time.time() - start_time

	if not exec_succeed:
	    # Mail notify ther owner
	    ReportFailExec(self.name(), exit_code, msg)
    
	result = TaskExecutionResult(self.name(), exec_succeed, cmd_run_time, msg)
	g_monitor_agent.ping(result)

class TaskManager:
    def __init__(self, dir):
	self._task_config_dir = dir
	self._task_list = []

    def _load_tasks(self):
	'''Load tasks from task config directory'''
	self._task_list = []
	for file in glob.glob('%s/*.dcron.cfg' % self._task_config_dir):
	    try:
		self._task_list.append(Task(file))
	    except RuntimeError, e:
		L.error(str(e))

    def _do_task(self, task):
	n = os.fork()
	if n < 0:
	    L.error('fork error: %s' % task.name()())
	elif n == 0:
	    # child
	    sys.exit(task.run())
	else:
	    # parent
	    # Return imediately, so we can fork other tasks.
	    g_monitor_agent.ping('TASK_START %s(%s) pid:%d' % (task.name(), task.cmd(), n))
	    return

    def _run_jobs(self, run_task_list):
	for task in run_task_list:
	    self._do_task(task)
	
    def _clean_exited_task(self):
	try:
	    while True:
		pid, exitstatus = os.waitpid(-1, os.WNOHANG)
		if not pid:
		    return

	except OSError, e:
	    pass

    def run(self):
	while True:
	    self._clean_exited_task()
	    self._load_tasks()

	    st_now = time.localtime(time.time())
	    run_task_list = [ task for task in self._task_list if
		    task.should_run(st_now)]

	    self._run_jobs(run_task_list)
	    time.sleep(60)

def main():
    parser = optparse.OptionParser()
    parser.add_option('-l', '--log-file', action = 'store')
    parser.add_option('-t', '--task-config-dir', action = 'store')
    parser.add_option('-D', '--daemonize', action = 'store_true', default = False)

    opts, args = parser.parse_args()
    if not opts.log_file:
	parser.error("Missing LOG_FILE")

    if not opts.task_config_dir:
	parser.error("Missing TASK_CONFIG_DIR")

    global L
    L = logging.getLogger()

    fmt = logging.Formatter("[%(asctime)s] %(name)s %(levelname)s %(message)s", "%Y%m%d %H:%M:%S")
    rotate_log_handler = logging.handlers.TimedRotatingFileHandler(opts.log_file, 'M', 1, 1)
    rotate_log_handler.setFormatter(fmt) 
    L.addHandler(rotate_log_handler)
    L.setLevel(logging.DEBUG)

    global g_monitor_agent
    g_monitor_agent = MonitorAgent()

    task_manager = TaskManager(opts.task_config_dir)

    if opts.daemonize:
	L.info("Forking into background, bye ...")
	rotate_log_handler.flush()
	daemonize()

    task_manager.run()
    logging.shutdown()

if __name__ == '__main__':
    sys.exit(main())
